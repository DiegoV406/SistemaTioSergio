
package br.com.sistematiosergio.telas;

import Config.RoundedButton;
import Config.RoundedTextField;
import br.com.sistematiosergio.dao.ProdutoDao;
import br.com.sistematiosergio.dao.RelatorioDao;
import br.com.sistematiosergio.dao.VendasDao;
import br.com.sistematiosergio.model.Produto;
import br.com.sistematiosergio.model.Relatorio;
import br.com.sistematiosergio.model.SessaoUsuario;
import br.com.sistematiosergio.model.Usuario;
import br.com.sistematiosergio.model.Vendas;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Tela de Controle de caixa
 * 
 */
public class TelaCaixa extends javax.swing.JFrame {

    /**
     * Metodo responsavel por preencher um comboBox
     */
    private void preencherComboProduto() {
        
        ProdutoDao produtoDao = new ProdutoDao();
        produtoDao.conectar();
        List<Produto> lista = produtoDao.getProduto();
        
        for (Produto c : lista) {
            cbmDescricao.addItem(c);
        }
        produtoDao.desconectar();
        atualizarValorProduto();
        atualizarQuantidadeProduto();
    }
    
    private DefaultTableModel tab;
    
    
    public TelaCaixa() {
        initComponents();
        preencherComboProduto();
        cbmDescricao.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (cbmDescricao.getSelectedItem() != null) {
                    atualizarValorProduto();
                    atualizarQuantidadeProduto();
                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbmDescricao = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabela = new javax.swing.JTable();
        btnAdicionar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblTotalGeral = new javax.swing.JLabel();
        btnFinalizar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lblValorProduto = new javax.swing.JLabel();
        lblValorQuantidade = new javax.swing.JLabel();
        btnLimpar = new javax.swing.JButton();
        btnRelatorio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 32)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(7, 53, 111));
        jLabel1.setText("Controle de Caixa");

        RoundedTextField campoQuantidade = new RoundedTextField(20);
        campoQuantidade.setText(txtQuantidade.getText());
        campoQuantidade.setBounds(txtQuantidade.getBounds());
        campoQuantidade.setBackground(Color.WHITE);
        campoQuantidade.setForeground(Color.BLACK);
        campoQuantidade.setFont(txtQuantidade.getFont());

        // Remove o antigo e adiciona o novo
        this.remove(txtQuantidade);
        txtQuantidade = campoQuantidade;  // Atualiza a referência para manter o nome
        this.add(txtQuantidade);
        this.repaint();
        txtQuantidade.setBackground(new java.awt.Color(238, 238, 238));
        txtQuantidade.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtQuantidade.setForeground(new java.awt.Color(0, 0, 0));
        txtQuantidade.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(7, 53, 111));
        jLabel2.setText("Descrição :");

        cbmDescricao.setBackground(new java.awt.Color(238, 238, 238));
        cbmDescricao.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cbmDescricao.setForeground(new java.awt.Color(0, 0, 0));
        cbmDescricao.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cbmDescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbmDescricaoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(7, 53, 111));
        jLabel4.setText("Quantidade :");

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));

        tblTabela.setBackground(new java.awt.Color(204, 204, 204));
        tblTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descrição", "Quantidade", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTabela);

        RoundedButton botaoArredondado2 = new RoundedButton("Adicionar", 50);
        botaoArredondado2.setBackground(new Color(59, 89, 182));
        botaoArredondado2.setForeground(Color.WHITE);
        botaoArredondado2.setFont(new Font("Arial", Font.BOLD, 14));
        botaoArredondado2.setBounds(btnAdicionar.getBounds()); // mesma posição e tamanho

        this.remove(btnAdicionar);  // Remove o botão antigo
        this.add(botaoArredondado2); // Adiciona o novo botão
        btnAdicionar = botaoArredondado2; // Se quiser manter o nome
        btnAdicionar.setBackground(new java.awt.Color(128, 83, 235));
        btnAdicionar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdicionar.setForeground(new java.awt.Color(255, 255, 255));
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 32)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(7, 53, 111));
        jLabel5.setText("Saldo :");

        lblTotalGeral.setFont(new java.awt.Font("Segoe UI", 1, 32)); // NOI18N
        lblTotalGeral.setForeground(new java.awt.Color(7, 53, 111));

        RoundedButton botaoArredondado3 = new RoundedButton("Finalizar", 50);
        botaoArredondado3.setBackground(new Color(59, 89, 182));
        botaoArredondado3.setForeground(Color.WHITE);
        botaoArredondado3.setFont(new Font("Arial", Font.BOLD, 14));
        botaoArredondado3.setBounds(btnFinalizar.getBounds()); // mesma posição e tamanho

        this.remove(btnFinalizar);  // Remove o botão antigo
        this.add(botaoArredondado3); // Adiciona o novo botão
        btnFinalizar = botaoArredondado3; // Se quiser manter o nome
        btnFinalizar.setBackground(new java.awt.Color(7, 53, 111));
        btnFinalizar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnFinalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnFinalizar.setText("Finalizar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });

        RoundedButton botaoArredondado = new RoundedButton("Voltar", 50);
        botaoArredondado.setBackground(new Color(59, 89, 182));
        botaoArredondado.setForeground(Color.WHITE);
        botaoArredondado.setFont(new Font("Arial", Font.BOLD, 14));
        botaoArredondado.setBounds(btnVoltar.getBounds()); // mesma posição e tamanho

        this.remove(btnVoltar);  // Remove o botão antigo
        this.add(botaoArredondado); // Adiciona o novo botão
        btnVoltar = botaoArredondado; // Se quiser manter o nome
        btnVoltar.setBackground(new java.awt.Color(94, 180, 251));
        btnVoltar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnVoltar.setForeground(new java.awt.Color(255, 255, 255));
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(7, 53, 111));
        jLabel7.setText("Valor :");

        lblValorProduto.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblValorProduto.setForeground(new java.awt.Color(7, 53, 111));

        lblValorQuantidade.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblValorQuantidade.setForeground(new java.awt.Color(7, 53, 111));

        RoundedButton botaoArredondado4 = new RoundedButton("Limpar", 50);
        botaoArredondado4.setBackground(new Color(59, 89, 182));
        botaoArredondado4.setForeground(Color.WHITE);
        botaoArredondado4.setFont(new Font("Arial", Font.BOLD, 14));
        botaoArredondado4.setBounds(btnLimpar.getBounds()); // mesma posição e tamanho

        this.remove(btnLimpar);  // Remove o botão antigo
        this.add(botaoArredondado4); // Adiciona o novo botão
        btnLimpar = botaoArredondado4; // Se quiser manter o nome
        btnLimpar.setBackground(new java.awt.Color(94, 180, 251));
        btnLimpar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpar.setText("Limpar Lista");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        RoundedButton botaoArredondado5 = new RoundedButton("Relatório/Vendas", 50);
        botaoArredondado5.setBackground(new Color(59, 89, 182));
        botaoArredondado5.setForeground(Color.WHITE);
        botaoArredondado5.setFont(new Font("Arial", Font.BOLD, 14));
        botaoArredondado5.setBounds(btnRelatorio.getBounds()); // mesma posição e tamanho

        this.remove(btnRelatorio);  // Remove o botão antigo
        this.add(botaoArredondado5); // Adiciona o novo botão
        btnRelatorio = botaoArredondado5; // Se quiser manter o nome
        btnRelatorio.setBackground(new java.awt.Color(94, 180, 251));
        btnRelatorio.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnRelatorio.setForeground(new java.awt.Color(255, 255, 255));
        btnRelatorio.setText("<html>Relátorio/<br>Vendas<html>");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(lblValorQuantidade))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(txtQuantidade)
                        .addComponent(cbmDescricao, 0, 420, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValorProduto))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(46, 46, 46)
                        .addComponent(lblTotalGeral))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(btnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(357, 357, 357))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbmDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblValorQuantidade))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblValorProduto))
                        .addGap(80, 80, 80)
                        .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lblTotalGeral))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * botão responsavel por retorna para a tela de menu
     * @param evt 
     */
    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        VendasDao.listar().clear();
        Usuario usuario = SessaoUsuario.getUsuarioLogado();
        if (usuario != null) {
            String setor = usuario.getSetor();
            this.dispose();
            TelaMenu tM = new TelaMenu();
            tM.configurarPermissaoEstoque(setor);
            tM.configurarPermissaoAdministração(setor);
            tM.setTitle("Menu");
            tM.setLocationRelativeTo(null);
            tM.pack();
            tM.setVisible(true);
        }
    }//GEN-LAST:event_btnVoltarActionPerformed

    
    private void cbmDescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbmDescricaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbmDescricaoActionPerformed

    /**
     * Botão responsavel por adicionar um produto a lista de venda
     * @param evt 
     */
    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        try {
        if (emptyFields()) {
            
        } else {
            Vendas vendas = new Vendas();
            vendas.setDescricao(cbmDescricao.getSelectedItem().toString());
            vendas.setQuantidade(Integer.parseInt(txtQuantidade.getText()));
            
            String valorTexto = lblValorProduto.getText().replace("R$", "").trim().replace(",", ".");
            vendas.setValor(Double.parseDouble(valorTexto));

            
            VendasDao.adicionar(vendas);

            mostrarTabela();
            atualizarTotalGeral();

            
            JOptionPane.showMessageDialog(null, "Cadastro realizado:\n"
                    + "Descrição: " + vendas.getDescricao()
                    + "\nQuantidade: " + vendas.getQuantidade()
                    + "\nValor: R$ " + String.format("%.2f", vendas.getValor())
                    );

            
            txtQuantidade.setText("");
            
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erro ao adicionar: " + e.getMessage());
    }
      
    }//GEN-LAST:event_btnAdicionarActionPerformed

    /**
     * Botão responsavel por limpar campos
     * @param evt 
     */
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        VendasDao.listar().clear();
        mostrarTabela();
        atualizarTotalGeral();
        
    }//GEN-LAST:event_btnLimparActionPerformed

    /**
     * Botão responsavel por finalizar uma venda
     * @param evt 
     */
    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed

        if (VendasDao.listar().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhuma venda registrada para finalizar.");
            return;
        }
        
        ProdutoDao dao = new ProdutoDao();
        RelatorioDao relatorioDao = new RelatorioDao();

        if (!dao.conectar()) {
            return;
        }

        try {
            List<Produto> listaBanco = dao.getProduto();

            
            for (Vendas venda : VendasDao.listar()) {
                boolean encontrado = false;

                for (Produto produto : listaBanco) {
                    if (produto.getNome().equals(venda.getDescricao())) {
                        encontrado = true;
                        if (venda.getQuantidade() > produto.getQuantidade()) {
                            JOptionPane.showMessageDialog(null,
                                    "Estoque insuficiente para o produto: " + produto.getNome()
                                    + "\nEstoque disponível: " + produto.getQuantidade()
                                    + "\nQuantidade solicitada: " + venda.getQuantidade());
                            return;
                        }
                        break;
                    }
                }

                if (!encontrado) {
                    JOptionPane.showMessageDialog(null,
                            "Produto não encontrado no banco de dados: " + venda.getDescricao());
                    return;
                }
            }

            
            for (Vendas venda : VendasDao.listar()) {
                for (Produto produto : listaBanco) {
                    if (produto.getNome().equals(venda.getDescricao())) {
                        int novaQuantidade = produto.getQuantidade() - venda.getQuantidade();
                        dao.atualizarQuantidade(produto.getId(), novaQuantidade);
                        break;
                    }
                }
            }

            
            Relatorio relatorio = new Relatorio();

            
            Usuario usuario = SessaoUsuario.getUsuarioLogado();
            if (usuario != null) {
                relatorio.setNomeVendedor(usuario.getNome());
            } else {
                relatorio.setNomeVendedor("Desconhecido");
            }

            
            String textoValor = lblTotalGeral.getText().replace("R$", "").trim().replace(",", ".");
            relatorio.setValorVenda(Double.parseDouble(textoValor));

            
            Date dataAtual = Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());
            relatorio.setDataVenda(dataAtual);

            
            if (relatorioDao.conectar()) {
                int resposta = relatorioDao.salvar(relatorio);

                if (resposta == 1) {
                    JOptionPane.showMessageDialog(null, "Relatório cadastrado com sucesso:\n"
                            + "Vendedor: " + relatorio.getNomeVendedor()
                            + "\nValor da Venda: R$ " + String.format("%.2f", relatorio.getValorVenda())
                            + "\nData: " + dataAtual);
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao tentar inserir o relatório.");
                }

                relatorioDao.desconectar();
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao conectar para salvar o relatório.");
            }

            
            JOptionPane.showMessageDialog(null, "Venda finalizada com sucesso! Estoque atualizado no banco de dados.");

            VendasDao.listar().clear(); // 

            mostrarTabela();      
            atualizarTotalGeral(); 

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao finalizar venda: " + e.getMessage());
        } finally {
            dao.desconectar();
        }

    }//GEN-LAST:event_btnFinalizarActionPerformed

    /**
     * Botão responsavel por levar para tela de relatorios
     * @param evt 
     */
    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        this.dispose();
        TelaRelatorio tR = new TelaRelatorio();
        tR.setTitle("Tela de Relatório de Vendas");
        tR.setLocationRelativeTo(null);
        tR.pack();
        tR.setVisible(true);
    }//GEN-LAST:event_btnRelatorioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCaixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCaixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCaixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCaixa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCaixa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox cbmDescricao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalGeral;
    private javax.swing.JLabel lblValorProduto;
    private javax.swing.JLabel lblValorQuantidade;
    private javax.swing.JTable tblTabela;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables


    /**
     * Metodo responsavel por atualizar o valor de um produto
     */
    private void atualizarValorProduto() {
    Produto produtoSelecionado = (Produto) cbmDescricao.getSelectedItem();
    if (produtoSelecionado != null) {
        lblValorProduto.setText("R$ " + String.format("%.2f", produtoSelecionado.getValor()));
    }

}
    /**
     * Metodo responsavel por atualizar a quantidade de um produto
     */
    private void atualizarQuantidadeProduto() {
    Produto produtoSelecionado = (Produto) cbmDescricao.getSelectedItem();
    if (produtoSelecionado != null) {
        lblValorQuantidade.setText(produtoSelecionado.getQuantidade() + " Unidades");
    }
}
    /**
     * Metodo responsavel por mostrar valores em uma tabela
     */
    private void mostrarTabela() {
        List<Vendas> lista = VendasDao.listar();
        tab = (DefaultTableModel) tblTabela.getModel();
        tab.setNumRows(0);

        for (Vendas a : lista) {
            tab.addRow(new Object[]{
                a.getDescricao(),
                a.getQuantidade(),
                a.getValor()
            });
        }
    }
    
   /**
     * Metodo para validar campos
     * @return Retorna a permissão para o sistema continuar
     */
   private boolean emptyFields() {
    boolean empty = true;

    
    String quantidadeStr = txtQuantidade.getText().trim();
    

  
     if (quantidadeStr.isEmpty() || !quantidadeStr.matches("\\d+")) {
        JOptionPane.showMessageDialog(null, "ATENÇÃO! Quantidade não pode ser vazia e deve conter somente números.");
    }
    
    else {
        empty = false;
    }

    return empty;
}
   
   private void atualizarTotalGeral() {
    double totalGeral = 0.0;

    for (Vendas venda : VendasDao.listar()) {
        totalGeral += venda.getValor() * venda.getQuantidade();
    }

    lblTotalGeral.setText("R$ " + String.format("%.2f", totalGeral));
}
   
   
    
}
